 import org.junit.Test
import org.mockito.Mockito.mock
import org.mockito.Mockito.`when`

class UtilitiesTest {

    @Test
    fun `test readFile function`() {
        val file = mock(File::class.java)
        `when`(file.readText()).thenReturn("file content")
        val result = readFile("path/to/file")
        assertEquals("file content", result)
    }

    @Test
    fun `test parseXML function`() {
        val xml = "<root><child>value</child></root>"
        val document = mock(Document::class.java)
        val builder = mock(DocumentBuilder::class.java)
        `when`(builder.parse(InputSource(StringReader(xml)))).thenReturn(document)
        `when`(removeIrrelevantNodes(document)).thenReturn(document)
        val result = parseXML(xml)
        assertEquals(document, result)
    }

    @Test
    fun `test newXMLBuilder function`() {
        val builderFactory = mock(DocumentBuilderFactory::class.java)
        val builder = mock(DocumentBuilder::class.java)
        `when`(builderFactory.newDocumentBuilder()).thenReturn(builder)
        `when`(builder.setErrorHandler(null)).thenReturn(builder)
        val result = newXMLBuilder()
        assertEquals(builder, result)
    }
}
